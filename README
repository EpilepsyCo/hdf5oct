hdf5oct - a HDF5 wrapper for GNU Octave
=======================================

Copyright 2012 Tom Mullins
Copyright 2015 Tom Mullins, Anton Starikov, Thorsten Liebig, Stefan Gro√ühauser

This is a library for GNU Octave for reading hdf5 files. At the moment it
provides only few functions:

 h5read: modeled after Matlab's h5read, which can read subsets of a
 	 dataset.  Octave's load function will attempt to read an
 	 entire dataset, which for very large datasets is
 	 undesired. h5util's h5read function does slightly better,
 	 reading only 2d slices of 3d datasets, but that's still
 	 fairly limiting. This exposes libhdf5's H5Sselect_hyperslab
 	 in a way which tries to be compatible with Matlab.

 h5readatt: Most of this function was written by thliebig. It allows
 	    to read scalar HDF5 attributes of some types.

 h5write: Write a matrix to a dataset. This
          will overwrite an already existing dataset, it cannot yet
          append data.

 h5writeatt: Attach an attribute to an object.

Note that only few of the HDF5 datatypes are supported by hdf5oct at
the moment, mostly float, integer and string.

# INSTALLATION #########################

To install, just use

    make
    
This will produce a package file named "hdf5oct-*.tar.gz" .  Then
you may either install the package with

    make install

or you may start GNU Octave and install the package manually (using
the correct file name) with the command

    pkg install hdf5oct-0.2.0.tar.gz

This will put the *.oct files somewhere where Octave will find them.
You can try running

    make test


# DEINSTALLATION #########################

To uninstall the package you may want to use

   make uninstall

# TODO #################################

- complete h5write to write hyperslabs

- write h5create, h5info

- allow to append to data, using the matlab syntax

- read string typed datasets

- read string-array typed attributes

- document how to read complex data

- write complex data in the same way as it is read

- maybe use hdf5's c++ interface instead of the c interace.

- write more comprehensive tests instead of a few random choices. Also
  test for error conditions.
  
- test with a chunked dataset with an unlimited dimension (should just work,
  though I haven't tried it)
 
- make sure Fortran/C ordering is handled in a matlab compatible manner

For integration into octave core:

- make it really clean

