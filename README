hdf5oct - a HDF5 wrapper for GNU Octave
=======================================

Copyright 2012 Tom Mullins
Copyright 2015 Tom Mullins, Anton Starikov, Thorsten Liebig, Stefan Gro√ühauser

This is a library for GNU Octave for reading hdf5 files. At the moment it
provides only few functions:

 h5read: modeled after Matlab's h5read, which can read subsets of a
 	 dataset.  Octave's load function will attempt to read an
 	 entire dataset, which for very large datasets is
 	 undesired. h5util's h5read function does slightly better,
 	 reading only 2d slices of 3d datasets, but that's still
 	 fairly limiting. This exposes libhdf5's H5Sselect_hyperslab
 	 in a way which tries to be compatible with Matlab.

 h5readatt: Most of this function was written by thliebig. Itd allows
 	    to read scalar HDF5 attributes of some types (float,
 	    integer, string).

Note that only few of the HDF5 datatypes are supported by hdf5oct.

# INSTALLATION #########################

To install, just use

    make
    
This will produce a package file named "hdf5oct-*.tar.gz" .  Then
you may either install the package with

    make install

or you may start GNU Octave and install the package manually (using
the correct file name) with the command

    pkg install hdf5oct-0.2.0.tar.gz

This will put the *.oct files somewhere where Octave will find them.
You can try running

    make test


# INSTALLATION #########################

To uninstall the package you may want to use

   make uninstall

# TODO #################################

-write h5write, h5create, h5writeatt. This may
 take some fairly major changes to H5File.
-read string typed datasets
-read string-array typed attributes
-document how to read complex data
-maybe use hdf5's c++ interface instead of the c interace.
-write more comprehensive tests instead of a few random choices. Also test for
 error conditions.
-test h5readatt
-test with a chunked dataset with an unlimited dimension (should just work,
 though I haven't tried it)
-modify to follow "Octave conventions" if I ever find info on what those are.

For integration into octave core:

- make it really clean

- get rid of the warning: doc_cache_create: unusable help text found in file 'hdf5oct'

- then build it depedently based on the presence of
  hdf5. Check if HAVE_HDF5 is true to build it or to have
  gripe_disabled_feature (function_name, "HDF5]")

- drop the HDF5 major version check you are now doing for windows.
  Instead, have a configure macro to check for features (or lack of
  them).
  https://github.com/stegro/hdf5oct/blob/master/h5readatt.cpp#L42
  That check is done at build time, and the configure script will
  inform the user if he is building Octave without hdf5 support.

  